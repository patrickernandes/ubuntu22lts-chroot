#!/bin/sh -e


#
# Instalação rápida via Shell script do Ubuntu 22.04LTS em ambiente chroot.
#
#  Copyright (C) 2022  Patrick <patrick@ernandes.info>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#

# Vars:
SUDO_USER='administrator'
HOSTNAME='server001'
DOMAIN='domain.local'
NET_IP='dhcp'
NET_MASK=''
NET_GW=''
NET_DNS=''
CHROOT_DIR='/mnt'

# Colors:
NOCOLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
#################################################

if [ -z "${disk}" ]; then
    echo "Favor configurar a variável 'disk'!"; echo
    exit 1
else
    echo "var disk='${disk}'"
fi

if [ -z "${CHROOT_DIR}" ]; then
    echo "Favor configurar a variável 'CHROOT_DIR'!"; echo
    exit 1
else
    echo "var CHROOT_DIR='${CHROOT_DIR}'"
fi

if [ -z "${SUDO_USER}" ]; then
    echo "Favor configurar a variável 'SUDO_USER'!"; echo
    exit 1
else
    echo "var SUDO_USER='${SUDO_USER}'"
fi

if [ -z "${HOSTNAME}" ]; then
    echo "Favor configurar a variável 'HOSTNAME'!"; echo
    exit 1
else
    echo "var HOSTNAME='${HOSTNAME}'"
fi

if [ -z "${DOMAIN}" ]; then
    echo "Favor configurar a variável 'DOMAIN'!"; echo
    exit 1
else
    echo "var DOMAIN='${DOMAIN}'"
fi

if [ -z "${NET_IP}" ]; then
    echo "Favor configurar a variável 'NET_IP'!"; echo
    exit 1
else
    if [ "${NET_IP}" = "dhcp" ]; then
        echo "var NET_IP='${NET_IP}'"
    else
        echo "var NET_IP='${NET_IP}'"
        echo "var NET_MASK='${NET_MASK}'"
        echo "var NET_GW='${NET_GW}'"
        echo "var NET_DNS='${NET_DNS}'"
    fi
fi


echo
check_network(){
    if ! ping4 -q -c 1 -W 1 google.com > /dev/null; then
        echo "$RED Sem conexão com a internet!$NOCOLOR"; echo
        exit 1
    else
        apt update
        apt -y install debootstrap arch-install-scripts
    fi
}


check_tools(){
    set -- "debootstrap" "genfstab"
    for i in "$@"; do
        if ! command -v "${i}"; then
            echo "$RED Não encontrado o aplicativo '${i}'!$NOCOLOR"; echo
            exit 1
        fi
    done
}


run(){
    chroot ${CHROOT_DIR} "$@"
}


ubuntu_bootstrap(){
    echo
    if mountpoint -q "${CHROOT_DIR}"; then
        debootstrap --arch=amd64 --variant=minbase --components=main,multiverse,universe,restricted jammy ${CHROOT_DIR} http://br.archive.ubuntu.com/ubuntu/
    else
        echo "$RED error - nenhum volume montado em '/mnt'!$NOCOLOR"; echo
        exit 1
    fi
}


chroot_mount(){
    mount -t proc /proc ${CHROOT_DIR}/proc 
    mount --bind /dev ${CHROOT_DIR}/dev
    mount -o bind /dev/pts ${CHROOT_DIR}/dev/pts
    mount -t sysfs /sys ${CHROOT_DIR}/sys
    mount -t tmpfs tmpfs ${CHROOT_DIR}/run
}


chroot_ubuntu_install(){
    echo
    echo "${HOSTNAME}" > ${CHROOT_DIR}/etc/hostname
    echo "127.0.0.1    localhost" > ${CHROOT_DIR}/etc/hosts
    echo "127.0.1.1    ${HOSTNAME}.${DOMAIN}    ${HOSTNAME}" >> ${CHROOT_DIR}/etc/hosts
    
    
    run apt -y install --no-install-recommends vim kmod apt-utils whiptail

    cat <<EOF > ${CHROOT_DIR}/root/.vimrc
set nobackup
set noswapfile
set nowritebackup

filetype plugin indent on
syntax on

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set modeline

colo desert
set mouse=c
EOF

    mkdir ${CHROOT_DIR}/root/.bin
    mkdir ${CHROOT_DIR}/root/.ssh
    chmod 700 ${CHROOT_DIR}/root/.ssh
    touch ${CHROOT_DIR}/root/.ssh/authorized_keys
    chmod 600 ${CHROOT_DIR}/root/.ssh/authorized_keys

    cat <<EOF >> ${CHROOT_DIR}/root/.bashrc
export LS_OPTIONS='--color=auto'
alias ls='ls $LS_OPTIONS'
HISTTIMEFORMAT="%F %T "
HISTFILESIZE=3000
PS1="\[\e[31m\]\h\[\e[m\]@\[\e[33m\]\u\[\e[m\][\w]\\$ "
#[[ $TERM != "screen" ]] && exec tmux  ##autostart tmux.
export TERM=xterm-256color
export PATH="$HOME/.bin:$PATH"
export EDITOR='/usr/bin/vim'
export PAGER='/usr/bin/less'
alias l='ls -lh'
alias la='ls -lha'
alias lt='ls -lhtr'
alias rm='rm -i'
alias log='less +G /var/log/messages'
alias dmesg='dmesg -T'
alias alert="egrep -i 'err|warn|crit|alert' /var/log/messages | less +G"
alias g='grep -v -E "^#|^$"'
alias update='apt update'
alias uplist='apt list --upgradeable'
alias upgrade='apt upgrade'
alias search='apt search'
alias dd='dd status=progress'
alias lv='lvs -a -o +devices'
alias s='systemctl'
alias d='docker'
EOF

    cat <<EOF > ${CHROOT_DIR}/etc/apt/apt.conf
APT::Install-Recommends "0";
APT::Install-Suggests "0";
EOF

    cat <<EOF > ${CHROOT_DIR}/etc/apt/sources.list
#official repolist:
deb http://br.archive.ubuntu.com/ubuntu jammy main restricted
deb http://br.archive.ubuntu.com/ubuntu jammy-updates main restricted
deb http://br.archive.ubuntu.com/ubuntu jammy universe
deb http://br.archive.ubuntu.com/ubuntu jammy-updates universe
deb http://br.archive.ubuntu.com/ubuntu jammy multiverse
deb http://br.archive.ubuntu.com/ubuntu jammy-updates multiverse
deb http://br.archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse
deb http://br.archive.ubuntu.com/ubuntu jammy-security main restricted
deb http://br.archive.ubuntu.com/ubuntu jammy-security universe
deb http://br.archive.ubuntu.com/ubuntu jammy-security multiverse
EOF

    run apt update 
    run apt -y upgrade
    
    run apt -y install tzdata
    run dpkg-reconfigure tzdata
  
    run apt -y install locales
    run dpkg-reconfigure locales
    echo "LANGUAGE=pt_BR:pt:en" >> ${CHROOT_DIR}/etc/default/locale

    run apt -y install console-setup 
    run cat /etc/default/console-setup

    run apt -y install initramfs-tools linux-generic linux-image-generic 
    run apt -y install systemd systemd-sysv systemd-timesyncd libnss-systemd libpam-systemd init
    run apt -y install dbus cron gettext-base debconf-i18n util-linux-locales man-db manpages-pt-br less irqbalance kbd htop dstat tmux tree ncdu rsync openssh-client openssh-server pciutils usbutils nano pv acpid netbase net-tools isc-dhcp-client iputils-ping iproute2 netcat-openbsd telnet parted gdisk fdisk lvm2 bc dmidecode bridge-utils lsof hdparm ntfs-3g dosfstools kpartx unzip iftop wget whois pigz smartmontools rsyslog logrotate psmisc nmon nethogs ifupdown sudo openssl traceroute zstd fuse3 uml-utilities curl ncurses-term iptables ebtables arptables ethtool xz-utils bzip2 ca-certificates smemstat software-properties-common linux-tools-generic linux-tools-common

    if [ -d "/sys/firmware/efi" ]; then
        run apt -y install grub-efi-amd64 shim-signed shim-helpers-amd64-signed efibootmgr
        run grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ubuntu --recheck --no-nvram --removable
    else
        run apt -y install grub-pc os-prober
        run grub-install --recheck "${disk}"
    fi

    sed -i "s/quiet/quiet net.ifnames=0 ipv6.disable=1/g" ${CHROOT_DIR}/etc/default/grub
    echo "GRUB_DISABLE_OS_PROBER=true" >> ${CHROOT_DIR}/etc/default/grub
    run update-grub

    run rm -f /etc/machine-id /var/lib/dbus/machine-id
    run dbus-uuidgen --ensure=/etc/machine-id
    run dbus-uuidgen --ensure
    run ln -fs /etc/machine-id /var/lib/dbus/machine-id

    cat <<EOF >> ${CHROOT_DIR}/etc/modules
dm_mod
dm_snapshot
dm_mirror
dm_cache
dm_cache_smq
dm_thin_pool
bridge
kvm
vhost_net
fuse
nbd
EOF

    sed -i '157 i filter = [ "a|/dev/sd*|", "a|/dev/vd*|", "r|/dev/cdrom|", "r|/dev/loop*|" ]' ${CHROOT_DIR}/etc/lvm/lvm.conf

    sed -i '/^#PermitRootLogin prohibit-password/a PermitRootLogin yes' ${CHROOT_DIR}/etc/ssh/sshd_config
    
    cat <<EOF >> ${CHROOT_DIR}/etc/sysctl.conf

#desabilitar firewall na bridge:
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0
EOF

    cat <<EOF >> ${CHROOT_DIR}/etc/sysctl.conf

#habilitar ip_forward:
net.ipv4.ip_forward = 1
EOF

    cat <<EOF > ${CHROOT_DIR}/etc/adjtime
0.0 0 0.0
0
LOCAL
EOF

    sed -i 's/#NTP=/NTP=br.pool.ntp.org/g' ${CHROOT_DIR}/etc/systemd/timesyncd.conf

    cat <<EOF >> ${CHROOT_DIR}/etc/network/interfaces

# The loopback network interface:
auto lo
iface lo inet loopback
EOF

    if [ "${NET_IP}" = "dhcp" ]; then
        cat <<EOF >> ${CHROOT_DIR}/etc/network/interfaces

# The primary network interface:
allow-hotplug eth0
iface eth0 inet dhcp
EOF
    else
        cat <<EOF >> ${CHROOT_DIR}/etc/network/interfaces

# The primary network interface
allow-hotplug eth0
iface eth0 inet static
  address ${NET_IP}
  netmask ${NET_MASK}
  gateway ${NET_GW}
  dns-nameservers ${NET_DNS}
EOF
    fi
  
    if [ -d /sys/class/net/eth1 ]; then
        cat <<EOF >> ${CHROOT_DIR}/etc/network/interfaces

# The second network interface:
auto eth1
iface eth1 inet manual
EOF
    fi

    cat <<EOF > ${CHROOT_DIR}/etc/rc.local
#!/bin/sh -e
#
# rc.local
#


exit 0
EOF

    run chmod +x /etc/rc.local

    if [ -c /dev/kvm ]; then
        sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& intel_iommu=on systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false/g' ${CHROOT_DIR}/etc/default/grub
        run update-grub
    fi

    run useradd -m -s /bin/bash -g users -G sudo ${SUDO_USER}
    echo "$YELLOW PASS - digitar a senha para o usuário '${SUDO_USER}'.$NOCOLOR"
    run passwd ${SUDO_USER}; echo

#    run useradd -m -s /bin/bash -g users ${SUDO_USER}
#    echo "$YELLOW PASS - digitar a senha para o usuário '${SUDO_USER}'.$NOCOLOR"
#    run passwd ${SUDO_USER}; echo
#
#    run echo "${SUDO_USER} ALL=(root) NOPASSWD:ALL" | tee -a /etc/sudoers.d/${SUDO_USER}
#    run chmod 0440 /etc/sudoers.d/${SUDO_USER}

    echo "$YELLOW PASS - digitar a senha para o usuário 'root'.$NOCOLOR"
    run passwd root; echo
    rm -f ${CHROOT_DIR}/root/.bash_history

    genfstab -U ${CHROOT_DIR} > ${CHROOT_DIR}/etc/fstab
    cat ${CHROOT_DIR}/etc/fstab; echo
    sleep 1; echo
}


chroot_umount(){
    set -- "/boot/efi" "/boot" "/home" "/var"
    for i in "$@"; do
        if mountpoint -q "${CHROOT_DIR}${i}"; then
            umount "${CHROOT_DIR}${i}"
        fi
    done

    if mountpoint -q ${CHROOT_DIR}; then
        umount ${CHROOT_DIR}/run
        umount ${CHROOT_DIR}/sys
        umount ${CHROOT_DIR}/dev/pts
        umount ${CHROOT_DIR}/dev
        umount ${CHROOT_DIR}/proc
        sleep 5
        umount ${CHROOT_DIR}
    fi
}


install_finished(){
    echo "$GREEN Instalação finalizada..$NOCOLOR"
    echo "$GREEN Favor reiniciar!$NOCOLOR"; echo
    exit 0
}



# INICIO ########################################
test "$(id -u)" != 0 && { echo "$RED ERROR - execução somente como usuário 'root'!$NOCOLOR"; echo; exit 1; }

check_network
check_tools
ubuntu_bootstrap
chroot_mount
chroot_ubuntu_install
chroot_umount
install_finished



#fazer:
#export disk='/dev/sda'
#sh install | tee -a /mnt/log.txt
